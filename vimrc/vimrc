" Syntax:
"""""""""""""""""""""""""""""""""""""""
" Colorscheme
syntax on
set background=dark
let g:gruvbox_contrast_dark = 'hard'
" colorscheme gruvbox

" file types
" txx are cpp templates
au BufNewFile,BufRead *.txx set filetype=cpp
" VTK files are xml
autocmd BufRead,BufNewFile *.vt* set filetype=xml
autocmd BufRead,BufNewFile *.cpd set filetype=xml
" Paraview state files are xml
autocmd BufRead,BufNewFile *.pvsm set filetype=xml

" vifm conf is vim
au BufRead,BufNewFile vifm* set filetype=vim

" Bindings:
"""""""""""""""""""""""""""""""""""""""
let mapleader=" "

nmap U <C-r>
nmap ; :
" browse buffer
map <leader>j :bnext<CR>
map <leader>k :bprevious<CR>

" File browser
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20
map <leader>o :Vexplore<CR>

" Go to next empty line with enter
nnoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'

" Display number of search occurence
map <leader>c :%s///gn<CR>

" adding c++ print line
nnoremap <leader>ip istd::cout <<  << std::endl;<ESC>2F<SPACE>i

" Editor:
"""""""""""""""""""""""""""""""""""""""
" Appearance
set ruler                  "Show the cursor position all the time
set cursorline             "Change the current line background
set scrolloff=8            "Keep 8 line above and under the current one
set number                 "Show line numbers
set relativenumber         "Show relative line numbers
" let &colorcolumn=120       "Highlight column 120
"hi ColorColumn ctermbg=darkgrey guibg=darkgrey 

" Features
set ignorecase             "Ignore case when searching
set smartcase              "Case sensitive if uppercase is asked
set hlsearch               "Have vim highlight the target of a search
set incsearch              "Show search matches as you type
set wildignorecase				 "Ignore case in file name completion

" Indentation
"""""""""""""""""""""""""""""""""""""""
set tabstop=2              "Number of spaces a TAB in the text stands for
set shiftwidth=2           "Number of spaces used for each step of (auto)indent
set expandtab              "Tabs to spaces
set autoindent

" Misc:
"""""""""""""""""""""""""""""""""""""""
set laststatus=2           "Always show status line
set showcmd

set autowrite              "Automatically write a file when leaving a modified buffer
set autoread               "Reload the file if changed from the outside
set confirm                "Start a dialog when a command fails (here when quit command fails)

set wildmenu
set wildmode=longest,full

set encoding=utf-8
set fileencoding=utf-8

set undofile

" Plugins:
"""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
"  Plug 'junegunn/vim-easy-align'
  Plug 'junegunn/fzf.vim'

  " lsp
"  Plug 'prabirshrestha/vim-lsp'
"  Plug 'mattn/vim-lsp-settings'
"  Plug 'prabirshrestha/asyncomplete.vim'
"  Plug 'prabirshrestha/asyncomplete-lsp.vim'
call plug#end()

" vim-lsp
  function! s:on_lsp_buffer_enabled() abort
      setlocal omnifunc=lsp#complete
      setlocal signcolumn=yes
      if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
      nmap <buffer> gd <plug>(lsp-definition)
      nmap <buffer> gr <plug>(lsp-references)
      nmap <buffer> gi <plug>(lsp-implementation)
      nmap <buffer> gt <plug>(lsp-type-definition)
      nmap <buffer> <leader>rn <plug>(lsp-rename)
      nmap <buffer> <leader>p <Plug>(lsp-previous-diagnostic)
      nmap <buffer> <leader>n <Plug>(lsp-next-diagnostic)
      nmap <buffer> <leader>h <plug>(lsp-hover)
      nmap <buffer> <leader>s <plug>(lsp-document-symbol)

      " refer to doc to add more commands
  endfunction

  augroup lsp_install
      au!
      " call s:on_lsp_buffer_enabled only for languages that has the server registered.
      autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END

  let g:lsp_highlight_references_enabled = 1
  highlight link lspReference Underlined
  let g:lsp_signs_enabled = 1         " enable signs
  let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
  " let g:lsp_diagnostics_enabled=0
  " nmap <leader>d :let g:lsp_diagnostics_enabled=0<CR>

" asycomplete
  inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
  imap <c-space> <Plug>(asyncomplete_force_refresh)

" Commentary
  autocmd FileType c,cpp setlocal commentstring=//\ %s

" vim-align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap <leader>a <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap <leader>a <Plug>(EasyAlign)

nmap <leader>f :Files<cr>
nmap <leader>b :Buffers<cr>

" nice to have:
" Bonus:
" - ale : syntax checker
" - jedi : python completion 
" - nerdtree : file tree
