" Colorscheme
"""""""""""""""""""""""""""""""""""""""
syntax on
set background=dark
let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox

" file types
" txx are cpp templates
au BufNewFile,BufRead *.txx set filetype=cpp
" VTK files are xml
autocmd BufRead,BufNewFile *.vt* set filetype=xml
autocmd BufRead,BufNewFile *.cpd set filetype=xml
" Paraview state files are xml
autocmd BufRead,BufNewFile *.pvsm set filetype=xml

" vifm conf is vim
au BufRead,BufNewFile vifm* set filetype=vim

" Bindings:
"""""""""""""""""""""""""""""""""""""""
let mapleader=" "

nmap U <C-r>
nmap ; :

" browse buffer
map <leader>j :bnext<CR>
map <leader>k :bprevious<CR>

" Display number of search occurence
map <leader>c :%s///gn<CR>

" adding c++ print line
nnoremap <leader>ip istd::cout <<  << std::endl;<ESC>2F<SPACE>i

" Editor:
"""""""""""""""""""""""""""""""""""""""
" Appearance
set ruler                  "Show the cursor position all the time
set cursorline             "Change the current line background
set scrolloff=8            "Keep 8 line above and under the current one
set number                 "Show line numbers
set relativenumber         "Show relative line numbers

" Features
set ignorecase             "Ignore case when searching
set smartcase              "Case sensitive if uppercase is asked
set hlsearch               "Have vim highlight the target of a search
set incsearch              "Show search matches as you type
set wildignorecase				 "Ignore case in file name completion

" Indentation
"""""""""""""""""""""""""""""""""""""""
set tabstop=2              "Number of spaces a TAB in the text stands for
set shiftwidth=2           "Number of spaces used for each step of (auto)indent
set expandtab              "Tabs to spaces
set autoindent

" Misc:
"""""""""""""""""""""""""""""""""""""""
set laststatus=2           "Always show status line
set showcmd

set autowrite              "Automatically write a file when leaving a modified buffer
set autoread               "Reload the file if changed from the outside
set confirm                "Start a dialog when a command fails (here when quit command fails)

set wildmenu
set wildmode=longest,full

set encoding=utf-8
set fileencoding=utf-8

set undofile

" Plugins
"""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
"  Plug 'junegunn/vim-easy-align'
  Plug 'junegunn/fzf.vim'

  " lsp
  Plug 'neovim/nvim-lspconfig'
  Plug 'WhoIsSethDaniel/toggle-lsp-diagnostics.nvim'
call plug#end()

" -------------------------------------
" vim-lsp

" xxx LUA code
lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', 'gp', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', 'gn', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>i', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>rf', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
  buf_set_keymap('n', '<space>s', '<cmd>lua vim.lsp.buf.document_symbol()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = {'clangd'}
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF
" xxx end of LUA code

nmap <leader>t  <Plug>(toggle-lsp-diag)
nmap <leader>h :ClangdSwitchSourceHeader<cr>

" -------------------------------------
" Commentary
  autocmd FileType c,cpp setlocal commentstring=//\ %s

" -------------------------------------
" vim-align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap <leader>a <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap <leader>a <Plug>(EasyAlign)

" -------------------------------------
" fzf
nmap <leader>f :Files<cr>
nmap <leader>b :Buffers<cr>
